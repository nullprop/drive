#pragma once

#include <vulkan/vulkan_core.h>

// Generated by ShaderCompiler
#include "../Generated/Shaders.h"

namespace drive
{
class Shader
{
  public:
    Shader()                         = delete;
    ~Shader()                        = delete;
    Shader(const Shader&)            = delete;
    Shader(Shader&&)                 = delete;
    Shader& operator=(const Shader&) = delete;
    Shader& operator=(Shader&&)      = delete;

    constexpr static VkShaderModuleCreateInfo GetVulkanCreateInfo(
        const void*  spv,
        const size_t size
    )
    {
        VkShaderModuleCreateInfo createInfo {};
        createInfo.sType    = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
        createInfo.codeSize = size;
        createInfo.pCode    = static_cast<const uint32_t*>(spv);
        return createInfo;
    }
};

// Usage:
// auto shader = LOAD_VULKAN_SPV(Simple_frag);
// To load Shaders/Simple.frag (Generated/Simple.frag.spv.h)
#define LOAD_VULKAN_SPV(NAME) drive::Shader::GetVulkanCreateInfo(NAME##_spv, NAME##_spv_len)
} // namespace drive
